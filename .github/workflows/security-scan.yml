name: Validate Infrastructure
on: pull_request

permissions:
  contents: write
  id-token: write

defaults:
  run:
    working-directory: ./Infra

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install TFLint
        run: |
          wget https://github.com/terraform-linters/tflint/releases/download/v0.50.2/tflint_linux_amd64.zip
          unzip tflint_linux_amd64.zip
          sudo mv tflint /usr/local/bin/
          tflint --version

      - name: Run TFLint
        run: tflint --init && tflint -f compact
   

      - name: Install Checkov
        run: |
          pip3 install --upgrade pip
          pip3 install checkov

      - name: Run Checkov
        run: checkov -d . --framework terraform --soft-fail

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::211125325699:role/Demo_Access
          aws-region: us-east-1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        shell: bash
        env:
          TF_IN_AUTOMATION: "true"
        run: |
          terraform plan -no-color > plan.txt
          cat plan.txt
          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          cat plan.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        
      - name: Setup Node.js
        if: github.event_name == 'pull_request'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install terraform-docs
        if: github.event_name == 'pull_request'
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Generate Terraform Docs and Commit
        if: github.event_name == 'pull_request'
        run: |
          git config --local user.email "vnagaraj984@gmail.com"
          git config --local user.name "nag9844"

          echo "--- Generating terraform-docs ---"
          # Direct terraform-docs to generate markdown to a temporary file
          terraform-docs markdown . > README.md.new
          # Overwrite the actual README.md only if generation was successful
          mv README.md.new README.md

          # Add README.md to staging area.
          if [ -f README.md ]; then
            git add README.md
            # Attempt to commit. If there are no changes staged, this will return a non-zero exit code.
            # The '|| true' ensures the step doesn't fail, but we'll check if a commit happened later.
            if git commit -m "docs: Update README.md"; then
              echo "Successfully committed README.md changes."
            else
              echo "No README.md changes to commit or commit failed. Continuing..."
              # Check if there are still unstaged changes that were not committed
              if ! git diff --quiet; then
                echo "WARNING: Uncommitted changes still exist after attempting to commit README.MD."
                git status
              fi
            fi
          else
            echo "WARNING: README.md was not generated by terraform-docs."
          fi

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
 
            <details><summary>Show Plan</summary>
 
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
 
            </details>
 
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
 
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
   